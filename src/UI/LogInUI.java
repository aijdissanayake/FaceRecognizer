/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import Logic.ImageProcessor;
import java.awt.BorderLayout;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.WindowConstants;

/**
 *
 * @author Achala PC
 */
public class LogInUI extends javax.swing.JFrame {

    /**
     * Creates new form LogInUI
     */
    
    private ImageProcessor imageProcessor = new ImageProcessor();
    private Home homePage;
    private double match = 50;
    
    public LogInUI(Double match) {
        initComponents();
        this.match= match;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        logInButton = new javax.swing.JButton();
        registerButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        logInButton.setText("LogIn");
        logInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logInButtonActionPerformed(evt);
            }
        });

        registerButton.setText("Register");
        registerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerButtonActionPerformed(evt);
            }
        });

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("BIO-METRIC AUTHENTICATION WITH FACE RECOGNITION");

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = {
                " * Processing images may take few seconds while logging and registering.",
                " * All the images needed to be 200(width) X 280(height).",
                " * Images with face in the full image area are ideal.",
                " * Color of the face should be a natural color for detection.",
                " * All the images are encrypted before storing."

            };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jList1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(61, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(logInButton)
                                .addGap(18, 18, 18)
                                .addComponent(registerButton))
                            .addComponent(exitButton))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {exitButton, logInButton, registerButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(logInButton)
                    .addComponent(registerButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {exitButton, logInButton, registerButton});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void registerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerButtonActionPerformed
        String fileName = JOptionPane.showInputDialog("Please Enter a User Name: ");
        if(fileName != null)
        {
            //Create a file chooser
            JOptionPane.showMessageDialog(null, "Upload Your Image!");
            final JFileChooser fc = new JFileChooser();
            fc.setAcceptAllFileFilterUsed(false);
            fc.addChoosableFileFilter(new ImageFilter());
            //In response to a button click:
            int returnVal = fc.showOpenDialog(logInButton);

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = fc.getSelectedFile();
                //This is where a real application would open the file.
                System.out.println("Opening: " + file.getPath() + "." );
                fileName = "userImages\\"+fileName + ".png";
                ;
                int showImageBox = JOptionPane.YES_NO_OPTION;
                int showImage = JOptionPane.showConfirmDialog (null, "Your Face has been detected! Click 'Yes' to check it or 'No' to continue! ","Warning",showImageBox);
                if(showImage == JOptionPane.YES_OPTION)
                {
                    try {
                        FileInputStream display = imageProcessor.loadImage(file.getPath());
                        BufferedImage myPicture = ImageIO.read(new File(file.getPath()));
                        imageProcessor.detectFace(myPicture);
                        
                        JFrame editorFrame = new JFrame("Face Detected");                    
                        editorFrame.setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);
                        ImageIcon imageIcon = new ImageIcon(myPicture);
                        JLabel jLabel = new JLabel();
                        jLabel.setIcon(imageIcon);
                        editorFrame.getContentPane().add(jLabel, BorderLayout.CENTER);

                        editorFrame.pack();
                        editorFrame.setLocationRelativeTo(null);
                        editorFrame.setVisible(true);
                        
                        int confirmImageBox = JOptionPane.YES_NO_OPTION;
                        int confirmImage = JOptionPane.showConfirmDialog (null, "Register with the detected face? ","Warning",confirmImageBox);
                        if(confirmImage == JOptionPane.YES_OPTION)
                        {   
                            if(myPicture.getHeight()==280 && myPicture.getWidth()==200){
                            ByteArrayOutputStream mp = new ByteArrayOutputStream();
                            ImageIO.write(myPicture,"PNG",mp);
                            File tempFile = new File("temp");
                            ImageIO.write(myPicture, "PNG", tempFile);                            
                            imageProcessor.saveImage(imageProcessor.encryptImage(new FileInputStream("temp")),fileName);
                            tempFile.delete();
                            
                            }
                            else{
                            JOptionPane.showMessageDialog(null, "Image Size has to be 200(width)*300(height)!");                        
                            }
                        }
                        else
                        {
                            
                            JOptionPane.showMessageDialog(null, "Registration Aborted!");
                        }
                        
                        editorFrame.setVisible(false);
                        
                    } catch (IOException ex) {
                        Logger.getLogger(LogInUI.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
                
                
//                imageProcessor.encryptImage(file.getPath(), "enc");
            } else {
                System.out.println("Open command cancelled by user." );
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null, "You Must Enter a User Name!");
        }
    }//GEN-LAST:event_registerButtonActionPerformed

    private void logInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logInButtonActionPerformed
        
        String userName = JOptionPane.showInputDialog("Please Enter the User Name to Login: ");
        //get the matching authImage
        String filePath ="userImages\\"+ userName+".png";
        
        FileInputStream encAuthImage = imageProcessor.loadImage(filePath);
        if (encAuthImage == null) 
        {
            JOptionPane.showMessageDialog(null, "User Not Found!");
        }
        else
            {
              JOptionPane.showMessageDialog(null, "Press OK to upload your image");
              BufferedImage authImage;
                //decrypted
                    authImage = imageProcessor.decryptImage(encAuthImage);

                //Create a file chooser
                final JFileChooser fc = new JFileChooser();
                fc.setAcceptAllFileFilterUsed(false);
                fc.addChoosableFileFilter(new ImageFilter());
                //In response to a button click:
                int returnVal = fc.showOpenDialog(logInButton);
                File userFile = null;
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    userFile = fc.getSelectedFile();
                    //This is where a real application would open the file.
                    System.out.println("Opening: " + userFile.getName() + "." );
                    BufferedImage userImage;
                    try {
                        userImage = ImageIO.read(userFile);
                        imageProcessor.detectFace(userImage);
                        
                        JFrame editorFrame = new JFrame("Face Detected");  
                        editorFrame.setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);
                        ImageIcon imageIcon = new ImageIcon(userImage);
                        JLabel jLabel = new JLabel();
                        jLabel.setIcon(imageIcon);
                        editorFrame.getContentPane().add(jLabel, BorderLayout.CENTER);

                        editorFrame.pack();
                        editorFrame.setLocationRelativeTo(null);
                        editorFrame.setVisible(true);
                        
                        int showImageBox = JOptionPane.YES_NO_OPTION;
                        int showImage = JOptionPane.showConfirmDialog (null, " Authenticate with the detected face? ","Warning",showImageBox);
                        if(showImage == JOptionPane.YES_OPTION)
                        {
                        editorFrame.setVisible(false);
//                        ImageIO.write(userImage, "PNG", new File("userInput.png"));
//                        ImageIO.write(authImage, "PNG", new File("stored.png"));
                        double val = imageProcessor.recognizeFace(userImage, authImage);
                        
                        if(val != -1){
                            if(val>=match){
                                this.setVisible(false);
                                this.homePage = new Home(userName,match);
                                homePage.setVisible(true);
                                }
                            else
                            {
                             JOptionPane.showMessageDialog(null, "Matching was only "+val+"%. "+"Authentication need "+match+"%"+ " Try with another face");                                   
                            }
                        }
                        else{
                            JOptionPane.showMessageDialog(null, "Image Size has to be 200(width)*300(height)!");
                        }
                        }
                        else{editorFrame.setVisible(false);}

                    } catch (IOException ex) {
                        ex.printStackTrace();
                    }


                } 
                else {
                    System.out.println("Open command cancelled by user." );
                }
            
            //Compare the two images
//            if(imageProcessor.compareExactImages(userFile, authImage)){
//                this.setVisible(false);
//                this.homePage = new Home(userName);
//                homePage.setVisible(true);
//            }
//            else{
//                JOptionPane.showMessageDialog(null, "Your Image doesn't match with the User Name!");            
//            }
            
        }
        
    }//GEN-LAST:event_logInButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LogInUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LogInUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LogInUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LogInUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try{
                    new LogInUI(Double.parseDouble(JOptionPane.showInputDialog("Please Enter the Matching value for authentication [0 would authenticate any face image,100 need the exact face image, Default is 50%]: "))).setVisible(true);
                
                   }
                catch(NumberFormatException e){
                    JOptionPane.showMessageDialog(null, "You must enter a matching value");
                }
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton logInButton;
    private javax.swing.JButton registerButton;
    // End of variables declaration//GEN-END:variables
}
